import {
  CacheType,
  Client,
  CommandInteraction,
  CommandInteractionOptionResolver,
  TextChannel,
} from 'discord.js'
import { sendGAS } from '../lib/gas'
import { RawCommand } from '.'
import Ask from './ask'
import { Time } from '../lib/openai-api/types'

class Bo {
  private static instance: Bo | null = null
  command: RawCommand

  constructor() {
    this.command = {
      name: 'bo',
      description: '„Éê„É≠„Éú„Çí„Åó„Åæ„Åô„ÄÇ',
      options: [
        {
          name: 'message',
          type: 3,
          description: '„É°„ÉÉ„Çª„Éº„Ç∏',
          required: true,
        },
      ],
    }
  }

  public static getInstance(): Bo {
    if (!Bo.instance) {
      Bo.instance = new Bo()
    }
    return Bo.instance
  }

  public handle = async (
    i: CommandInteraction<CacheType>,
    c: Client<boolean>
  ) => {
    try {
      const message = (i.options as CommandInteractionOptionResolver).getString(
        'message'
      ) as string
      await i.deferReply()

      await sendGAS(message, c, i.user)
      await i.editReply({ content: `\nLine„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Çä„Åæ„Åó„Åü„ÄÇ` })
    } catch (error) {
      console.error(error)
      await i.reply('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ')
    }
  }

  public bo = async (textChannel: TextChannel, time: Time) => {
    const emojiSets = [
      ["üê¢", "üêç", "ü¶é", "üêä"],
      ["üê¨", "üê≥", "üê†", "üêô"],
      ["üôà", "üôâ", "üôä", "üêí"],
      ["ü¶Å", "üêØ", "üêÖ", "üêÜ"],
      ["ü¶â", "ü¶Ö", "ü¶Ü", "üêß"],
      ["üå≥", "üçÅ", "üçÑ", "üå∞"],
      ["‚≠ê", "üåô", "‚òÄÔ∏è", "‚òÅÔ∏è"],
      ["üçé", "üçå", "üçá", "üçì"],
      ["ü•¶", "ü•ï", "üåΩ", "üçÖ"],
      ["üíñ", "üíô", "üíö", "üíõ"],
      ["üé∏", "üé∑", "ü•Å", "üéª"],
      ["‚öΩ", "üèÄ", "üèà", "‚öæ"],
      ["üçµ", "üç∂", "üç∑", "üç∫"],
      ["üöó", "‚úàÔ∏è", "üöÄ", "üö¢"],
      ["üèû", "üåÜ", "üèù", "üåâ"],
      ["üéÇ", "üç¶", "üç™", "üç©"],
      ["üéà", "üéÅ", "üéâ", "üéä"],
      ["üìö", "‚úèÔ∏è", "üéì", "üî¨"],
      ["üí°", "üíª", "üì±", "‚åö"],
      ["üé≠", "üé®", "üé¨", "üé§"],
    ]

    // „É©„É≥„ÉÄ„É†„Å´ÁµµÊñáÂ≠ó„Çª„ÉÉ„Éà„ÇíÈÅ∏Êäû
    const randomEmojiSet =
      emojiSets[Math.floor(Math.random() * emojiSets.length)]
    const text = await Ask.generateText(
      `${time}„Å´VALORANT„ÇíÂãüÈõÜ„Åô„ÇãÊñá„Çí‰Ωú„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
    )
    ;(textChannel as TextChannel)
      .send(
        `${text}\n1930„Äú ${randomEmojiSet[0]}\n2000„Äú${randomEmojiSet[1]}\n2030„Äú${randomEmojiSet[2]}\n2100„Äú${randomEmojiSet[3]}`
      )
      .then((message) => {
        message.react(randomEmojiSet[0])
        message.react(randomEmojiSet[1])
        message.react(randomEmojiSet[2])
        message.react(randomEmojiSet[3])
      })
  }
}

export default Bo.getInstance()
